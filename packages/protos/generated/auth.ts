// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "auth";

export interface ValidateUserRequest {
  /** email or phone */
  identifier: string;
  password: string;
}

export interface ValidateUserResponse {
  isValid: boolean;
  userId: string;
}

export interface GetTokensRequest {
  userId: string;
}

export interface RefreshTokensRequest {
  refreshToken: string;
}

export interface GetTokensResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  isValid: boolean;
  userId: string;
  email: string;
  role: string;
}

function createBaseValidateUserRequest(): ValidateUserRequest {
  return { identifier: "", password: "" };
}

export const ValidateUserRequest: MessageFns<ValidateUserRequest> = {
  encode(message: ValidateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== "") {
      writer.uint32(10).string(message.identifier);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateUserRequest {
    return {
      identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: ValidateUserRequest): unknown {
    const obj: any = {};
    if (message.identifier !== "") {
      obj.identifier = message.identifier;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateUserRequest>, I>>(base?: I): ValidateUserRequest {
    return ValidateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateUserRequest>, I>>(object: I): ValidateUserRequest {
    const message = createBaseValidateUserRequest();
    message.identifier = object.identifier ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseValidateUserResponse(): ValidateUserResponse {
  return { isValid: false, userId: "" };
}

export const ValidateUserResponse: MessageFns<ValidateUserResponse> = {
  encode(message: ValidateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateUserResponse {
    return {
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: ValidateUserResponse): unknown {
    const obj: any = {};
    if (message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateUserResponse>, I>>(base?: I): ValidateUserResponse {
    return ValidateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateUserResponse>, I>>(object: I): ValidateUserResponse {
    const message = createBaseValidateUserResponse();
    message.isValid = object.isValid ?? false;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetTokensRequest(): GetTokensRequest {
  return { userId: "" };
}

export const GetTokensRequest: MessageFns<GetTokensRequest> = {
  encode(message: GetTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokensRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetTokensRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokensRequest>, I>>(base?: I): GetTokensRequest {
    return GetTokensRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokensRequest>, I>>(object: I): GetTokensRequest {
    const message = createBaseGetTokensRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRefreshTokensRequest(): RefreshTokensRequest {
  return { refreshToken: "" };
}

export const RefreshTokensRequest: MessageFns<RefreshTokensRequest> = {
  encode(message: RefreshTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshTokensRequest {
    return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
  },

  toJSON(message: RefreshTokensRequest): unknown {
    const obj: any = {};
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokensRequest>, I>>(base?: I): RefreshTokensRequest {
    return RefreshTokensRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokensRequest>, I>>(object: I): RefreshTokensRequest {
    const message = createBaseRefreshTokensRequest();
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseGetTokensResponse(): GetTokensResponse {
  return { accessToken: "", refreshToken: "" };
}

export const GetTokensResponse: MessageFns<GetTokensResponse> = {
  encode(message: GetTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokensResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: GetTokensResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTokensResponse>, I>>(base?: I): GetTokensResponse {
    return GetTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTokensResponse>, I>>(object: I): GetTokensResponse {
    const message = createBaseGetTokensResponse();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseValidateTokenRequest(): ValidateTokenRequest {
  return { token: "" };
}

export const ValidateTokenRequest: MessageFns<ValidateTokenRequest> = {
  encode(message: ValidateTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: ValidateTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(base?: I): ValidateTokenRequest {
    return ValidateTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(object: I): ValidateTokenRequest {
    const message = createBaseValidateTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseValidateTokenResponse(): ValidateTokenResponse {
  return { isValid: false, userId: "", email: "", role: "" };
}

export const ValidateTokenResponse: MessageFns<ValidateTokenResponse> = {
  encode(message: ValidateTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenResponse {
    return {
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: ValidateTokenResponse): unknown {
    const obj: any = {};
    if (message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(base?: I): ValidateTokenResponse {
    return ValidateTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(object: I): ValidateTokenResponse {
    const message = createBaseValidateTokenResponse();
    message.isValid = object.isValid ?? false;
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  /** Validate credentials against user‑service */
  validateUser: {
    path: "/auth.AuthService/ValidateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateUserRequest): Buffer => Buffer.from(ValidateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ValidateUserRequest => ValidateUserRequest.decode(value),
    responseSerialize: (value: ValidateUserResponse): Buffer =>
      Buffer.from(ValidateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ValidateUserResponse => ValidateUserResponse.decode(value),
  },
  /** Given a valid userId, issue JWT + refresh token */
  getTokens: {
    path: "/auth.AuthService/GetTokens",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTokensRequest): Buffer => Buffer.from(GetTokensRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTokensRequest => GetTokensRequest.decode(value),
    responseSerialize: (value: GetTokensResponse): Buffer => Buffer.from(GetTokensResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTokensResponse => GetTokensResponse.decode(value),
  },
  /** Rotate refresh token */
  refreshTokens: {
    path: "/auth.AuthService/RefreshTokens",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefreshTokensRequest): Buffer => Buffer.from(RefreshTokensRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RefreshTokensRequest => RefreshTokensRequest.decode(value),
    responseSerialize: (value: GetTokensResponse): Buffer => Buffer.from(GetTokensResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTokensResponse => GetTokensResponse.decode(value),
  },
  /** Validate token */
  validateToken: {
    path: "/auth.AuthService/ValidateToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateTokenRequest): Buffer => Buffer.from(ValidateTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ValidateTokenRequest => ValidateTokenRequest.decode(value),
    responseSerialize: (value: ValidateTokenResponse): Buffer =>
      Buffer.from(ValidateTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ValidateTokenResponse => ValidateTokenResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  /** Validate credentials against user‑service */
  validateUser: handleUnaryCall<ValidateUserRequest, ValidateUserResponse>;
  /** Given a valid userId, issue JWT + refresh token */
  getTokens: handleUnaryCall<GetTokensRequest, GetTokensResponse>;
  /** Rotate refresh token */
  refreshTokens: handleUnaryCall<RefreshTokensRequest, GetTokensResponse>;
  /** Validate token */
  validateToken: handleUnaryCall<ValidateTokenRequest, ValidateTokenResponse>;
}

export interface AuthServiceClient extends Client {
  /** Validate credentials against user‑service */
  validateUser(
    request: ValidateUserRequest,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  validateUser(
    request: ValidateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  validateUser(
    request: ValidateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ValidateUserResponse) => void,
  ): ClientUnaryCall;
  /** Given a valid userId, issue JWT + refresh token */
  getTokens(
    request: GetTokensRequest,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  getTokens(
    request: GetTokensRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  getTokens(
    request: GetTokensRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  /** Rotate refresh token */
  refreshTokens(
    request: RefreshTokensRequest,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  refreshTokens(
    request: RefreshTokensRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  refreshTokens(
    request: RefreshTokensRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTokensResponse) => void,
  ): ClientUnaryCall;
  /** Validate token */
  validateToken(
    request: ValidateTokenRequest,
    callback: (error: ServiceError | null, response: ValidateTokenResponse) => void,
  ): ClientUnaryCall;
  validateToken(
    request: ValidateTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ValidateTokenResponse) => void,
  ): ClientUnaryCall;
  validateToken(
    request: ValidateTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ValidateTokenResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(AuthServiceService, "auth.AuthService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
