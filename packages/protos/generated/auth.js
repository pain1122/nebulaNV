"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: auth.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthServiceClient = exports.AuthServiceService = exports.ValidateTokenResponse = exports.ValidateTokenRequest = exports.GetTokensResponse = exports.RefreshTokensRequest = exports.GetTokensRequest = exports.ValidateUserResponse = exports.ValidateUserRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "auth";
function createBaseValidateUserRequest() {
    return { identifier: "", password: "" };
}
exports.ValidateUserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.identifier = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.identifier !== "") {
            obj.identifier = message.identifier;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateUserRequest();
        message.identifier = object.identifier ?? "";
        message.password = object.password ?? "";
        return message;
    },
};
function createBaseValidateUserResponse() {
    return { isValid: false, userId: "" };
}
exports.ValidateUserResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isValid !== false) {
            writer.uint32(8).bool(message.isValid);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isValid = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isValid !== false) {
            obj.isValid = message.isValid;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateUserResponse();
        message.isValid = object.isValid ?? false;
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseGetTokensRequest() {
    return { userId: "" };
}
exports.GetTokensRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTokensRequest();
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseRefreshTokensRequest() {
    return { refreshToken: "" };
}
exports.RefreshTokensRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.refreshToken !== "") {
            writer.uint32(10).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefreshTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.RefreshTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRefreshTokensRequest();
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseGetTokensResponse() {
    return { accessToken: "", refreshToken: "" };
}
exports.GetTokensResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.GetTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTokensResponse();
        message.accessToken = object.accessToken ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseValidateTokenRequest() {
    return { token: "" };
}
exports.ValidateTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateTokenRequest();
        message.token = object.token ?? "";
        return message;
    },
};
function createBaseValidateTokenResponse() {
    return { isValid: false, userId: "", email: "", role: "" };
}
exports.ValidateTokenResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isValid !== false) {
            writer.uint32(8).bool(message.isValid);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        if (message.role !== "") {
            writer.uint32(34).string(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isValid = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isValid !== false) {
            obj.isValid = message.isValid;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateTokenResponse();
        message.isValid = object.isValid ?? false;
        message.userId = object.userId ?? "";
        message.email = object.email ?? "";
        message.role = object.role ?? "";
        return message;
    },
};
exports.AuthServiceService = {
    /** Validate credentials against user‑service */
    validateUser: {
        path: "/auth.AuthService/ValidateUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.ValidateUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.ValidateUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ValidateUserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ValidateUserResponse.decode(value),
    },
    /** Given a valid userId, issue JWT + refresh token */
    getTokens: {
        path: "/auth.AuthService/GetTokens",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetTokensRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetTokensRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.GetTokensResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.GetTokensResponse.decode(value),
    },
    /** Rotate refresh token */
    refreshTokens: {
        path: "/auth.AuthService/RefreshTokens",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RefreshTokensRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RefreshTokensRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.GetTokensResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.GetTokensResponse.decode(value),
    },
    /** Validate token */
    validateToken: {
        path: "/auth.AuthService/ValidateToken",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.ValidateTokenRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.ValidateTokenRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.ValidateTokenResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.ValidateTokenResponse.decode(value),
    },
};
exports.AuthServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.AuthServiceService, "auth.AuthService");
function isSet(value) {
    return value !== null && value !== undefined;
}
