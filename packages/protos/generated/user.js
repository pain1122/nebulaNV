"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: user.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserServiceClient = exports.UserServiceService = exports.SetRefreshTokenRequest = exports.FindUserWithHashResponse = exports.FindUserWithHashRequest = exports.CreateUserRequest = exports.UpdateProfileRequest = exports.UserResponse = exports.GetUserRequest = exports.FindUserRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "user";
function createBaseFindUserRequest() {
    return { email: undefined, phone: undefined };
}
exports.FindUserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== undefined) {
            writer.uint32(10).string(message.email);
        }
        if (message.phone !== undefined) {
            writer.uint32(18).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFindUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : undefined,
            phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== undefined) {
            obj.email = message.email;
        }
        if (message.phone !== undefined) {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return exports.FindUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFindUserRequest();
        message.email = object.email ?? undefined;
        message.phone = object.phone ?? undefined;
        return message;
    },
};
function createBaseGetUserRequest() {
    return { id: "" };
}
exports.GetUserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUserResponse() {
    return { id: "", email: "", role: "" };
}
exports.UserResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        if (message.role !== "") {
            writer.uint32(26).string(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        return obj;
    },
    create(base) {
        return exports.UserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserResponse();
        message.id = object.id ?? "";
        message.email = object.email ?? "";
        message.role = object.role ?? "";
        return message;
    },
};
function createBaseUpdateProfileRequest() {
    return { id: "", email: "", newPassword: "", currentPassword: "" };
}
exports.UpdateProfileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        if (message.newPassword !== "") {
            writer.uint32(26).string(message.newPassword);
        }
        if (message.currentPassword !== "") {
            writer.uint32(34).string(message.currentPassword);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.newPassword = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentPassword = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
            currentPassword: isSet(object.currentPassword) ? globalThis.String(object.currentPassword) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.newPassword !== "") {
            obj.newPassword = message.newPassword;
        }
        if (message.currentPassword !== "") {
            obj.currentPassword = message.currentPassword;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateProfileRequest();
        message.id = object.id ?? "";
        message.email = object.email ?? "";
        message.newPassword = object.newPassword ?? "";
        message.currentPassword = object.currentPassword ?? "";
        return message;
    },
};
function createBaseCreateUserRequest() {
    return { email: "", password: "", role: "" };
}
exports.CreateUserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        if (message.role !== "") {
            writer.uint32(26).string(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        return obj;
    },
    create(base) {
        return exports.CreateUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateUserRequest();
        message.email = object.email ?? "";
        message.password = object.password ?? "";
        message.role = object.role ?? "";
        return message;
    },
};
function createBaseFindUserWithHashRequest() {
    return { email: undefined, phone: undefined };
}
exports.FindUserWithHashRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== undefined) {
            writer.uint32(10).string(message.email);
        }
        if (message.phone !== undefined) {
            writer.uint32(18).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFindUserWithHashRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : undefined,
            phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== undefined) {
            obj.email = message.email;
        }
        if (message.phone !== undefined) {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return exports.FindUserWithHashRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFindUserWithHashRequest();
        message.email = object.email ?? undefined;
        message.phone = object.phone ?? undefined;
        return message;
    },
};
function createBaseFindUserWithHashResponse() {
    return { id: "", email: "", role: "", passwordHash: "", refreshToken: "" };
}
exports.FindUserWithHashResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        if (message.role !== "") {
            writer.uint32(26).string(message.role);
        }
        if (message.passwordHash !== "") {
            writer.uint32(34).string(message.passwordHash);
        }
        if (message.refreshToken !== "") {
            writer.uint32(42).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFindUserWithHashResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.passwordHash = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.passwordHash !== "") {
            obj.passwordHash = message.passwordHash;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.FindUserWithHashResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFindUserWithHashResponse();
        message.id = object.id ?? "";
        message.email = object.email ?? "";
        message.role = object.role ?? "";
        message.passwordHash = object.passwordHash ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseSetRefreshTokenRequest() {
    return { userId: "", refreshToken: "" };
}
exports.SetRefreshTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRefreshTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.SetRefreshTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRefreshTokenRequest();
        message.userId = object.userId ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
exports.UserServiceService = {
    findUser: {
        path: "/user.UserService/FindUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.FindUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.FindUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UserResponse.decode(value),
    },
    getUser: {
        path: "/user.UserService/GetUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UserResponse.decode(value),
    },
    updateProfile: {
        path: "/user.UserService/UpdateProfile",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateProfileRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateProfileRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UserResponse.decode(value),
    },
    createUser: {
        path: "/user.UserService/CreateUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateUserRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateUserRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UserResponse.decode(value),
    },
    findUserWithHash: {
        path: "/user.UserService/FindUserWithHash",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.FindUserWithHashRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.FindUserWithHashRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.FindUserWithHashResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.FindUserWithHashResponse.decode(value),
    },
    setRefreshToken: {
        path: "/user.UserService/SetRefreshToken",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.SetRefreshTokenRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SetRefreshTokenRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.UserResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.UserResponse.decode(value),
    },
};
exports.UserServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.UserServiceService, "user.UserService");
function isSet(value) {
    return value !== null && value !== undefined;
}
