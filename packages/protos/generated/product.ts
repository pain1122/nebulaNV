// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "product";

/**
 * -----------------------------------------
 * Core DTO returned to clients
 * -----------------------------------------
 */
export interface Product {
  $type: "product.Product";
  id: string;
  slug: string;
  title: string;
  description: string;
  excerpt: string;
  sku: string;
  /** DRAFT|ACTIVE|ARCHIVED */
  status: string;
  price: number;
  currency: string;
  categoryId: string;
  /** thumbnail (primary image) */
  thumbnailUrl: string;
  /** 3D */
  model3dUrl: string;
  model3dFormat: string;
  model3dLiveView: boolean;
  model3dPosterUrl: string;
  /** VR plan */
  vrEnabled: boolean;
  vrPlanImageUrl: string;
  /** SEO */
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  customSchema: string;
  noindex: boolean;
  /** presentation / promos */
  isFeatured: boolean;
  featureSort: number;
  promoTitle: string;
  promoBadge: string;
  promoActive: boolean;
  /** discount */
  discountType: string;
  discountValue: number;
  discountActive: boolean;
  /** ISO8601 or "" */
  discountStart: string;
  /** ISO8601 or "" */
  discountEnd: string;
  effectivePrice: number;
  /** flat arrays to avoid heavy joins */
  tags: string[];
  complementaryIds: string[];
  createdAt: string;
  updatedAt: string;
  /** "" if not soft-deleted */
  deletedAt: string;
}

/** Minimal create input: keep required small */
export interface ProductInput {
  $type: "product.ProductInput";
  /** required (server validates presence): */
  title: string;
  slug: string;
  sku: string;
  price: number;
  categoryId: string;
  /** optional: */
  description: string;
  excerpt: string;
  currency: string;
  /** default ACTIVE */
  status: string;
  thumbnailUrl: string;
  model3dUrl: string;
  model3dFormat: string;
  model3dLiveView: boolean;
  model3dPosterUrl: string;
  vrEnabled: boolean;
  vrPlanImageUrl: string;
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  customSchema: string;
  noindex: boolean;
  isFeatured: boolean;
  featureSort: number;
  promoTitle: string;
  promoBadge: string;
  promoActive: boolean;
  /** optional */
  discountType: string;
  discountValue: number;
  discountActive: boolean;
  discountStart: string;
  discountEnd: string;
  tags: string[];
  complementaryIds: string[];
}

export interface ProductPatch {
  $type: "product.ProductPatch";
  /** id provided in UpdateProductRequest; everything below is optional */
  title: string;
  slug: string;
  sku: string;
  price: number;
  categoryId: string;
  description: string;
  excerpt: string;
  currency: string;
  status: string;
  thumbnailUrl: string;
  model3dUrl: string;
  model3dFormat: string;
  model3dLiveView: boolean;
  model3dPosterUrl: string;
  vrEnabled: boolean;
  vrPlanImageUrl: string;
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  customSchema: string;
  noindex: boolean;
  isFeatured: boolean;
  featureSort: number;
  promoTitle: string;
  promoBadge: string;
  promoActive: boolean;
  discountType: string;
  discountValue: number;
  discountActive: boolean;
  discountStart: string;
  discountEnd: string;
  tags: string[];
  complementaryIds: string[];
}

/**
 * -----------------------------------------
 * Requests / Responses
 * -----------------------------------------
 */
export interface CreateProductRequest {
  $type: "product.CreateProductRequest";
  data?: ProductInput | undefined;
}

export interface UpdateProductRequest {
  $type: "product.UpdateProductRequest";
  id: string;
  data?: ProductPatch | undefined;
}

export interface GetProductRequest {
  $type: "product.GetProductRequest";
  id: string;
}

export interface ListProductsRequest {
  $type: "product.ListProductsRequest";
  page: number;
  limit: number;
  q: string;
  categoryId: string;
  status: string;
  /** default false */
  includeDeleted: boolean;
}

export interface DeleteProductRequest {
  $type: "product.DeleteProductRequest";
  id: string;
}

export interface RestoreProductRequest {
  $type: "product.RestoreProductRequest";
  id: string;
}

export interface HardDeleteProductRequest {
  $type: "product.HardDeleteProductRequest";
  id: string;
}

export interface ProductResponse {
  $type: "product.ProductResponse";
  data?: Product | undefined;
}

export interface ListProductsResponse {
  $type: "product.ListProductsResponse";
  data: Product[];
  total: number;
}

export interface ApplyDiscountBulkRequest {
  $type: "product.ApplyDiscountBulkRequest";
  /** specific targets (optional) */
  ids: string[];
  /** or select by category */
  categoryId: string;
  /** optional filter */
  status: string;
  /** search title/sku */
  q: string;
  /** "PERCENTAGE"|"FIXED"|"NONE" */
  discountType: string;
  /** ignored if NONE */
  discountValue: number;
  discountActive: boolean;
  discountStart: string;
  discountEnd: string;
}

export interface BulkResult {
  $type: "product.BulkResult";
  updated: number;
}

export interface GalleryImage {
  $type: "product.GalleryImage";
  id: string;
  url: string;
  alt: string;
  /** maps to sortOrder */
  sort: number;
}

export interface NewImage {
  $type: "product.NewImage";
  url: string;
  alt: string;
  /** optional; if missing we append */
  sort: number;
}

export interface AddImagesRequest {
  $type: "product.AddImagesRequest";
  productId: string;
  images: NewImage[];
}

export interface ListGalleryRequest {
  $type: "product.ListGalleryRequest";
  productId: string;
  /** default false */
  includeDeleted: boolean;
}

export interface ImageOrder {
  $type: "product.ImageOrder";
  id: string;
  sort: number;
}

export interface ReorderImagesRequest {
  $type: "product.ReorderImagesRequest";
  productId: string;
  /** set new sort values */
  orders: ImageOrder[];
}

export interface RemoveImageRequest {
  $type: "product.RemoveImageRequest";
  productId: string;
  imageId: string;
  /** default false => soft delete */
  hardDelete: boolean;
}

export interface GalleryResponse {
  $type: "product.GalleryResponse";
  productId: string;
  images: GalleryImage[];
}

function createBaseProduct(): Product {
  return {
    $type: "product.Product",
    id: "",
    slug: "",
    title: "",
    description: "",
    excerpt: "",
    sku: "",
    status: "",
    price: 0,
    currency: "",
    categoryId: "",
    thumbnailUrl: "",
    model3dUrl: "",
    model3dFormat: "",
    model3dLiveView: false,
    model3dPosterUrl: "",
    vrEnabled: false,
    vrPlanImageUrl: "",
    metaTitle: "",
    metaDescription: "",
    metaKeywords: "",
    customSchema: "",
    noindex: false,
    isFeatured: false,
    featureSort: 0,
    promoTitle: "",
    promoBadge: "",
    promoActive: false,
    discountType: "",
    discountValue: 0,
    discountActive: false,
    discountStart: "",
    discountEnd: "",
    effectivePrice: 0,
    tags: [],
    complementaryIds: [],
    createdAt: "",
    updatedAt: "",
    deletedAt: "",
  };
}

export const Product: MessageFns<Product, "product.Product"> = {
  $type: "product.Product" as const,

  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.excerpt !== "") {
      writer.uint32(42).string(message.excerpt);
    }
    if (message.sku !== "") {
      writer.uint32(50).string(message.sku);
    }
    if (message.status !== "") {
      writer.uint32(58).string(message.status);
    }
    if (message.price !== 0) {
      writer.uint32(65).double(message.price);
    }
    if (message.currency !== "") {
      writer.uint32(74).string(message.currency);
    }
    if (message.categoryId !== "") {
      writer.uint32(82).string(message.categoryId);
    }
    if (message.thumbnailUrl !== "") {
      writer.uint32(90).string(message.thumbnailUrl);
    }
    if (message.model3dUrl !== "") {
      writer.uint32(98).string(message.model3dUrl);
    }
    if (message.model3dFormat !== "") {
      writer.uint32(106).string(message.model3dFormat);
    }
    if (message.model3dLiveView !== false) {
      writer.uint32(112).bool(message.model3dLiveView);
    }
    if (message.model3dPosterUrl !== "") {
      writer.uint32(122).string(message.model3dPosterUrl);
    }
    if (message.vrEnabled !== false) {
      writer.uint32(128).bool(message.vrEnabled);
    }
    if (message.vrPlanImageUrl !== "") {
      writer.uint32(138).string(message.vrPlanImageUrl);
    }
    if (message.metaTitle !== "") {
      writer.uint32(146).string(message.metaTitle);
    }
    if (message.metaDescription !== "") {
      writer.uint32(154).string(message.metaDescription);
    }
    if (message.metaKeywords !== "") {
      writer.uint32(162).string(message.metaKeywords);
    }
    if (message.customSchema !== "") {
      writer.uint32(170).string(message.customSchema);
    }
    if (message.noindex !== false) {
      writer.uint32(176).bool(message.noindex);
    }
    if (message.isFeatured !== false) {
      writer.uint32(184).bool(message.isFeatured);
    }
    if (message.featureSort !== 0) {
      writer.uint32(192).int32(message.featureSort);
    }
    if (message.promoTitle !== "") {
      writer.uint32(202).string(message.promoTitle);
    }
    if (message.promoBadge !== "") {
      writer.uint32(210).string(message.promoBadge);
    }
    if (message.promoActive !== false) {
      writer.uint32(216).bool(message.promoActive);
    }
    if (message.discountType !== "") {
      writer.uint32(226).string(message.discountType);
    }
    if (message.discountValue !== 0) {
      writer.uint32(233).double(message.discountValue);
    }
    if (message.discountActive !== false) {
      writer.uint32(240).bool(message.discountActive);
    }
    if (message.discountStart !== "") {
      writer.uint32(250).string(message.discountStart);
    }
    if (message.discountEnd !== "") {
      writer.uint32(258).string(message.discountEnd);
    }
    if (message.effectivePrice !== 0) {
      writer.uint32(265).double(message.effectivePrice);
    }
    for (const v of message.tags) {
      writer.uint32(274).string(v!);
    }
    for (const v of message.complementaryIds) {
      writer.uint32(282).string(v!);
    }
    if (message.createdAt !== "") {
      writer.uint32(290).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(298).string(message.updatedAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(306).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.excerpt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.model3dUrl = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.model3dFormat = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.model3dLiveView = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.model3dPosterUrl = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.vrEnabled = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.vrPlanImageUrl = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.customSchema = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.noindex = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.isFeatured = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.featureSort = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.promoTitle = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.promoBadge = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.promoActive = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.discountType = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 233) {
            break;
          }

          message.discountValue = reader.double();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.discountActive = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.discountStart = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.discountEnd = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 265) {
            break;
          }

          message.effectivePrice = reader.double();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.complementaryIds.push(reader.string());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      $type: Product.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      excerpt: isSet(object.excerpt) ? globalThis.String(object.excerpt) : "",
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
      model3dUrl: isSet(object.model3dUrl) ? globalThis.String(object.model3dUrl) : "",
      model3dFormat: isSet(object.model3dFormat) ? globalThis.String(object.model3dFormat) : "",
      model3dLiveView: isSet(object.model3dLiveView) ? globalThis.Boolean(object.model3dLiveView) : false,
      model3dPosterUrl: isSet(object.model3dPosterUrl) ? globalThis.String(object.model3dPosterUrl) : "",
      vrEnabled: isSet(object.vrEnabled) ? globalThis.Boolean(object.vrEnabled) : false,
      vrPlanImageUrl: isSet(object.vrPlanImageUrl) ? globalThis.String(object.vrPlanImageUrl) : "",
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : "",
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : "",
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : "",
      customSchema: isSet(object.customSchema) ? globalThis.String(object.customSchema) : "",
      noindex: isSet(object.noindex) ? globalThis.Boolean(object.noindex) : false,
      isFeatured: isSet(object.isFeatured) ? globalThis.Boolean(object.isFeatured) : false,
      featureSort: isSet(object.featureSort) ? globalThis.Number(object.featureSort) : 0,
      promoTitle: isSet(object.promoTitle) ? globalThis.String(object.promoTitle) : "",
      promoBadge: isSet(object.promoBadge) ? globalThis.String(object.promoBadge) : "",
      promoActive: isSet(object.promoActive) ? globalThis.Boolean(object.promoActive) : false,
      discountType: isSet(object.discountType) ? globalThis.String(object.discountType) : "",
      discountValue: isSet(object.discountValue) ? globalThis.Number(object.discountValue) : 0,
      discountActive: isSet(object.discountActive) ? globalThis.Boolean(object.discountActive) : false,
      discountStart: isSet(object.discountStart) ? globalThis.String(object.discountStart) : "",
      discountEnd: isSet(object.discountEnd) ? globalThis.String(object.discountEnd) : "",
      effectivePrice: isSet(object.effectivePrice) ? globalThis.Number(object.effectivePrice) : 0,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      complementaryIds: globalThis.Array.isArray(object?.complementaryIds)
        ? object.complementaryIds.map((e: any) => globalThis.String(e))
        : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : "",
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.excerpt !== "") {
      obj.excerpt = message.excerpt;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.thumbnailUrl !== "") {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.model3dUrl !== "") {
      obj.model3dUrl = message.model3dUrl;
    }
    if (message.model3dFormat !== "") {
      obj.model3dFormat = message.model3dFormat;
    }
    if (message.model3dLiveView !== false) {
      obj.model3dLiveView = message.model3dLiveView;
    }
    if (message.model3dPosterUrl !== "") {
      obj.model3dPosterUrl = message.model3dPosterUrl;
    }
    if (message.vrEnabled !== false) {
      obj.vrEnabled = message.vrEnabled;
    }
    if (message.vrPlanImageUrl !== "") {
      obj.vrPlanImageUrl = message.vrPlanImageUrl;
    }
    if (message.metaTitle !== "") {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== "") {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== "") {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.customSchema !== "") {
      obj.customSchema = message.customSchema;
    }
    if (message.noindex !== false) {
      obj.noindex = message.noindex;
    }
    if (message.isFeatured !== false) {
      obj.isFeatured = message.isFeatured;
    }
    if (message.featureSort !== 0) {
      obj.featureSort = Math.round(message.featureSort);
    }
    if (message.promoTitle !== "") {
      obj.promoTitle = message.promoTitle;
    }
    if (message.promoBadge !== "") {
      obj.promoBadge = message.promoBadge;
    }
    if (message.promoActive !== false) {
      obj.promoActive = message.promoActive;
    }
    if (message.discountType !== "") {
      obj.discountType = message.discountType;
    }
    if (message.discountValue !== 0) {
      obj.discountValue = message.discountValue;
    }
    if (message.discountActive !== false) {
      obj.discountActive = message.discountActive;
    }
    if (message.discountStart !== "") {
      obj.discountStart = message.discountStart;
    }
    if (message.discountEnd !== "") {
      obj.discountEnd = message.discountEnd;
    }
    if (message.effectivePrice !== 0) {
      obj.effectivePrice = message.effectivePrice;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.complementaryIds?.length) {
      obj.complementaryIds = message.complementaryIds;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.deletedAt !== "") {
      obj.deletedAt = message.deletedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? "";
    message.slug = object.slug ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.excerpt = object.excerpt ?? "";
    message.sku = object.sku ?? "";
    message.status = object.status ?? "";
    message.price = object.price ?? 0;
    message.currency = object.currency ?? "";
    message.categoryId = object.categoryId ?? "";
    message.thumbnailUrl = object.thumbnailUrl ?? "";
    message.model3dUrl = object.model3dUrl ?? "";
    message.model3dFormat = object.model3dFormat ?? "";
    message.model3dLiveView = object.model3dLiveView ?? false;
    message.model3dPosterUrl = object.model3dPosterUrl ?? "";
    message.vrEnabled = object.vrEnabled ?? false;
    message.vrPlanImageUrl = object.vrPlanImageUrl ?? "";
    message.metaTitle = object.metaTitle ?? "";
    message.metaDescription = object.metaDescription ?? "";
    message.metaKeywords = object.metaKeywords ?? "";
    message.customSchema = object.customSchema ?? "";
    message.noindex = object.noindex ?? false;
    message.isFeatured = object.isFeatured ?? false;
    message.featureSort = object.featureSort ?? 0;
    message.promoTitle = object.promoTitle ?? "";
    message.promoBadge = object.promoBadge ?? "";
    message.promoActive = object.promoActive ?? false;
    message.discountType = object.discountType ?? "";
    message.discountValue = object.discountValue ?? 0;
    message.discountActive = object.discountActive ?? false;
    message.discountStart = object.discountStart ?? "";
    message.discountEnd = object.discountEnd ?? "";
    message.effectivePrice = object.effectivePrice ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    message.complementaryIds = object.complementaryIds?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.deletedAt = object.deletedAt ?? "";
    return message;
  },
};

messageTypeRegistry.set(Product.$type, Product);

function createBaseProductInput(): ProductInput {
  return {
    $type: "product.ProductInput",
    title: "",
    slug: "",
    sku: "",
    price: 0,
    categoryId: "",
    description: "",
    excerpt: "",
    currency: "",
    status: "",
    thumbnailUrl: "",
    model3dUrl: "",
    model3dFormat: "",
    model3dLiveView: false,
    model3dPosterUrl: "",
    vrEnabled: false,
    vrPlanImageUrl: "",
    metaTitle: "",
    metaDescription: "",
    metaKeywords: "",
    customSchema: "",
    noindex: false,
    isFeatured: false,
    featureSort: 0,
    promoTitle: "",
    promoBadge: "",
    promoActive: false,
    discountType: "",
    discountValue: 0,
    discountActive: false,
    discountStart: "",
    discountEnd: "",
    tags: [],
    complementaryIds: [],
  };
}

export const ProductInput: MessageFns<ProductInput, "product.ProductInput"> = {
  $type: "product.ProductInput" as const,

  encode(message: ProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.sku !== "") {
      writer.uint32(26).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    if (message.excerpt !== "") {
      writer.uint32(90).string(message.excerpt);
    }
    if (message.currency !== "") {
      writer.uint32(98).string(message.currency);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.thumbnailUrl !== "") {
      writer.uint32(162).string(message.thumbnailUrl);
    }
    if (message.model3dUrl !== "") {
      writer.uint32(242).string(message.model3dUrl);
    }
    if (message.model3dFormat !== "") {
      writer.uint32(250).string(message.model3dFormat);
    }
    if (message.model3dLiveView !== false) {
      writer.uint32(256).bool(message.model3dLiveView);
    }
    if (message.model3dPosterUrl !== "") {
      writer.uint32(266).string(message.model3dPosterUrl);
    }
    if (message.vrEnabled !== false) {
      writer.uint32(320).bool(message.vrEnabled);
    }
    if (message.vrPlanImageUrl !== "") {
      writer.uint32(330).string(message.vrPlanImageUrl);
    }
    if (message.metaTitle !== "") {
      writer.uint32(402).string(message.metaTitle);
    }
    if (message.metaDescription !== "") {
      writer.uint32(410).string(message.metaDescription);
    }
    if (message.metaKeywords !== "") {
      writer.uint32(418).string(message.metaKeywords);
    }
    if (message.customSchema !== "") {
      writer.uint32(426).string(message.customSchema);
    }
    if (message.noindex !== false) {
      writer.uint32(432).bool(message.noindex);
    }
    if (message.isFeatured !== false) {
      writer.uint32(480).bool(message.isFeatured);
    }
    if (message.featureSort !== 0) {
      writer.uint32(488).int32(message.featureSort);
    }
    if (message.promoTitle !== "") {
      writer.uint32(498).string(message.promoTitle);
    }
    if (message.promoBadge !== "") {
      writer.uint32(506).string(message.promoBadge);
    }
    if (message.promoActive !== false) {
      writer.uint32(512).bool(message.promoActive);
    }
    if (message.discountType !== "") {
      writer.uint32(562).string(message.discountType);
    }
    if (message.discountValue !== 0) {
      writer.uint32(569).double(message.discountValue);
    }
    if (message.discountActive !== false) {
      writer.uint32(576).bool(message.discountActive);
    }
    if (message.discountStart !== "") {
      writer.uint32(586).string(message.discountStart);
    }
    if (message.discountEnd !== "") {
      writer.uint32(594).string(message.discountEnd);
    }
    for (const v of message.tags) {
      writer.uint32(642).string(v!);
    }
    for (const v of message.complementaryIds) {
      writer.uint32(650).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.excerpt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.model3dUrl = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.model3dFormat = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.model3dLiveView = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.model3dPosterUrl = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.vrEnabled = reader.bool();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.vrPlanImageUrl = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.customSchema = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.noindex = reader.bool();
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.isFeatured = reader.bool();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.featureSort = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.promoTitle = reader.string();
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.promoBadge = reader.string();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.promoActive = reader.bool();
          continue;
        }
        case 70: {
          if (tag !== 562) {
            break;
          }

          message.discountType = reader.string();
          continue;
        }
        case 71: {
          if (tag !== 569) {
            break;
          }

          message.discountValue = reader.double();
          continue;
        }
        case 72: {
          if (tag !== 576) {
            break;
          }

          message.discountActive = reader.bool();
          continue;
        }
        case 73: {
          if (tag !== 586) {
            break;
          }

          message.discountStart = reader.string();
          continue;
        }
        case 74: {
          if (tag !== 594) {
            break;
          }

          message.discountEnd = reader.string();
          continue;
        }
        case 80: {
          if (tag !== 642) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 81: {
          if (tag !== 650) {
            break;
          }

          message.complementaryIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductInput {
    return {
      $type: ProductInput.$type,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      excerpt: isSet(object.excerpt) ? globalThis.String(object.excerpt) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
      model3dUrl: isSet(object.model3dUrl) ? globalThis.String(object.model3dUrl) : "",
      model3dFormat: isSet(object.model3dFormat) ? globalThis.String(object.model3dFormat) : "",
      model3dLiveView: isSet(object.model3dLiveView) ? globalThis.Boolean(object.model3dLiveView) : false,
      model3dPosterUrl: isSet(object.model3dPosterUrl) ? globalThis.String(object.model3dPosterUrl) : "",
      vrEnabled: isSet(object.vrEnabled) ? globalThis.Boolean(object.vrEnabled) : false,
      vrPlanImageUrl: isSet(object.vrPlanImageUrl) ? globalThis.String(object.vrPlanImageUrl) : "",
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : "",
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : "",
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : "",
      customSchema: isSet(object.customSchema) ? globalThis.String(object.customSchema) : "",
      noindex: isSet(object.noindex) ? globalThis.Boolean(object.noindex) : false,
      isFeatured: isSet(object.isFeatured) ? globalThis.Boolean(object.isFeatured) : false,
      featureSort: isSet(object.featureSort) ? globalThis.Number(object.featureSort) : 0,
      promoTitle: isSet(object.promoTitle) ? globalThis.String(object.promoTitle) : "",
      promoBadge: isSet(object.promoBadge) ? globalThis.String(object.promoBadge) : "",
      promoActive: isSet(object.promoActive) ? globalThis.Boolean(object.promoActive) : false,
      discountType: isSet(object.discountType) ? globalThis.String(object.discountType) : "",
      discountValue: isSet(object.discountValue) ? globalThis.Number(object.discountValue) : 0,
      discountActive: isSet(object.discountActive) ? globalThis.Boolean(object.discountActive) : false,
      discountStart: isSet(object.discountStart) ? globalThis.String(object.discountStart) : "",
      discountEnd: isSet(object.discountEnd) ? globalThis.String(object.discountEnd) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      complementaryIds: globalThis.Array.isArray(object?.complementaryIds)
        ? object.complementaryIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProductInput): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.excerpt !== "") {
      obj.excerpt = message.excerpt;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.thumbnailUrl !== "") {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.model3dUrl !== "") {
      obj.model3dUrl = message.model3dUrl;
    }
    if (message.model3dFormat !== "") {
      obj.model3dFormat = message.model3dFormat;
    }
    if (message.model3dLiveView !== false) {
      obj.model3dLiveView = message.model3dLiveView;
    }
    if (message.model3dPosterUrl !== "") {
      obj.model3dPosterUrl = message.model3dPosterUrl;
    }
    if (message.vrEnabled !== false) {
      obj.vrEnabled = message.vrEnabled;
    }
    if (message.vrPlanImageUrl !== "") {
      obj.vrPlanImageUrl = message.vrPlanImageUrl;
    }
    if (message.metaTitle !== "") {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== "") {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== "") {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.customSchema !== "") {
      obj.customSchema = message.customSchema;
    }
    if (message.noindex !== false) {
      obj.noindex = message.noindex;
    }
    if (message.isFeatured !== false) {
      obj.isFeatured = message.isFeatured;
    }
    if (message.featureSort !== 0) {
      obj.featureSort = Math.round(message.featureSort);
    }
    if (message.promoTitle !== "") {
      obj.promoTitle = message.promoTitle;
    }
    if (message.promoBadge !== "") {
      obj.promoBadge = message.promoBadge;
    }
    if (message.promoActive !== false) {
      obj.promoActive = message.promoActive;
    }
    if (message.discountType !== "") {
      obj.discountType = message.discountType;
    }
    if (message.discountValue !== 0) {
      obj.discountValue = message.discountValue;
    }
    if (message.discountActive !== false) {
      obj.discountActive = message.discountActive;
    }
    if (message.discountStart !== "") {
      obj.discountStart = message.discountStart;
    }
    if (message.discountEnd !== "") {
      obj.discountEnd = message.discountEnd;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.complementaryIds?.length) {
      obj.complementaryIds = message.complementaryIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductInput>, I>>(base?: I): ProductInput {
    return ProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductInput>, I>>(object: I): ProductInput {
    const message = createBaseProductInput();
    message.title = object.title ?? "";
    message.slug = object.slug ?? "";
    message.sku = object.sku ?? "";
    message.price = object.price ?? 0;
    message.categoryId = object.categoryId ?? "";
    message.description = object.description ?? "";
    message.excerpt = object.excerpt ?? "";
    message.currency = object.currency ?? "";
    message.status = object.status ?? "";
    message.thumbnailUrl = object.thumbnailUrl ?? "";
    message.model3dUrl = object.model3dUrl ?? "";
    message.model3dFormat = object.model3dFormat ?? "";
    message.model3dLiveView = object.model3dLiveView ?? false;
    message.model3dPosterUrl = object.model3dPosterUrl ?? "";
    message.vrEnabled = object.vrEnabled ?? false;
    message.vrPlanImageUrl = object.vrPlanImageUrl ?? "";
    message.metaTitle = object.metaTitle ?? "";
    message.metaDescription = object.metaDescription ?? "";
    message.metaKeywords = object.metaKeywords ?? "";
    message.customSchema = object.customSchema ?? "";
    message.noindex = object.noindex ?? false;
    message.isFeatured = object.isFeatured ?? false;
    message.featureSort = object.featureSort ?? 0;
    message.promoTitle = object.promoTitle ?? "";
    message.promoBadge = object.promoBadge ?? "";
    message.promoActive = object.promoActive ?? false;
    message.discountType = object.discountType ?? "";
    message.discountValue = object.discountValue ?? 0;
    message.discountActive = object.discountActive ?? false;
    message.discountStart = object.discountStart ?? "";
    message.discountEnd = object.discountEnd ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.complementaryIds = object.complementaryIds?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(ProductInput.$type, ProductInput);

function createBaseProductPatch(): ProductPatch {
  return {
    $type: "product.ProductPatch",
    title: "",
    slug: "",
    sku: "",
    price: 0,
    categoryId: "",
    description: "",
    excerpt: "",
    currency: "",
    status: "",
    thumbnailUrl: "",
    model3dUrl: "",
    model3dFormat: "",
    model3dLiveView: false,
    model3dPosterUrl: "",
    vrEnabled: false,
    vrPlanImageUrl: "",
    metaTitle: "",
    metaDescription: "",
    metaKeywords: "",
    customSchema: "",
    noindex: false,
    isFeatured: false,
    featureSort: 0,
    promoTitle: "",
    promoBadge: "",
    promoActive: false,
    discountType: "",
    discountValue: 0,
    discountActive: false,
    discountStart: "",
    discountEnd: "",
    tags: [],
    complementaryIds: [],
  };
}

export const ProductPatch: MessageFns<ProductPatch, "product.ProductPatch"> = {
  $type: "product.ProductPatch" as const,

  encode(message: ProductPatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.sku !== "") {
      writer.uint32(26).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.categoryId !== "") {
      writer.uint32(42).string(message.categoryId);
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    if (message.excerpt !== "") {
      writer.uint32(90).string(message.excerpt);
    }
    if (message.currency !== "") {
      writer.uint32(98).string(message.currency);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.thumbnailUrl !== "") {
      writer.uint32(162).string(message.thumbnailUrl);
    }
    if (message.model3dUrl !== "") {
      writer.uint32(242).string(message.model3dUrl);
    }
    if (message.model3dFormat !== "") {
      writer.uint32(250).string(message.model3dFormat);
    }
    if (message.model3dLiveView !== false) {
      writer.uint32(256).bool(message.model3dLiveView);
    }
    if (message.model3dPosterUrl !== "") {
      writer.uint32(266).string(message.model3dPosterUrl);
    }
    if (message.vrEnabled !== false) {
      writer.uint32(320).bool(message.vrEnabled);
    }
    if (message.vrPlanImageUrl !== "") {
      writer.uint32(330).string(message.vrPlanImageUrl);
    }
    if (message.metaTitle !== "") {
      writer.uint32(402).string(message.metaTitle);
    }
    if (message.metaDescription !== "") {
      writer.uint32(410).string(message.metaDescription);
    }
    if (message.metaKeywords !== "") {
      writer.uint32(418).string(message.metaKeywords);
    }
    if (message.customSchema !== "") {
      writer.uint32(426).string(message.customSchema);
    }
    if (message.noindex !== false) {
      writer.uint32(432).bool(message.noindex);
    }
    if (message.isFeatured !== false) {
      writer.uint32(480).bool(message.isFeatured);
    }
    if (message.featureSort !== 0) {
      writer.uint32(488).int32(message.featureSort);
    }
    if (message.promoTitle !== "") {
      writer.uint32(498).string(message.promoTitle);
    }
    if (message.promoBadge !== "") {
      writer.uint32(506).string(message.promoBadge);
    }
    if (message.promoActive !== false) {
      writer.uint32(512).bool(message.promoActive);
    }
    if (message.discountType !== "") {
      writer.uint32(562).string(message.discountType);
    }
    if (message.discountValue !== 0) {
      writer.uint32(569).double(message.discountValue);
    }
    if (message.discountActive !== false) {
      writer.uint32(576).bool(message.discountActive);
    }
    if (message.discountStart !== "") {
      writer.uint32(586).string(message.discountStart);
    }
    if (message.discountEnd !== "") {
      writer.uint32(594).string(message.discountEnd);
    }
    for (const v of message.tags) {
      writer.uint32(642).string(v!);
    }
    for (const v of message.complementaryIds) {
      writer.uint32(650).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductPatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductPatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.excerpt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.model3dUrl = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.model3dFormat = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.model3dLiveView = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.model3dPosterUrl = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.vrEnabled = reader.bool();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.vrPlanImageUrl = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.metaTitle = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.metaDescription = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.metaKeywords = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.customSchema = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.noindex = reader.bool();
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.isFeatured = reader.bool();
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.featureSort = reader.int32();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.promoTitle = reader.string();
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.promoBadge = reader.string();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.promoActive = reader.bool();
          continue;
        }
        case 70: {
          if (tag !== 562) {
            break;
          }

          message.discountType = reader.string();
          continue;
        }
        case 71: {
          if (tag !== 569) {
            break;
          }

          message.discountValue = reader.double();
          continue;
        }
        case 72: {
          if (tag !== 576) {
            break;
          }

          message.discountActive = reader.bool();
          continue;
        }
        case 73: {
          if (tag !== 586) {
            break;
          }

          message.discountStart = reader.string();
          continue;
        }
        case 74: {
          if (tag !== 594) {
            break;
          }

          message.discountEnd = reader.string();
          continue;
        }
        case 80: {
          if (tag !== 642) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 81: {
          if (tag !== 650) {
            break;
          }

          message.complementaryIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductPatch {
    return {
      $type: ProductPatch.$type,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      excerpt: isSet(object.excerpt) ? globalThis.String(object.excerpt) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : "",
      model3dUrl: isSet(object.model3dUrl) ? globalThis.String(object.model3dUrl) : "",
      model3dFormat: isSet(object.model3dFormat) ? globalThis.String(object.model3dFormat) : "",
      model3dLiveView: isSet(object.model3dLiveView) ? globalThis.Boolean(object.model3dLiveView) : false,
      model3dPosterUrl: isSet(object.model3dPosterUrl) ? globalThis.String(object.model3dPosterUrl) : "",
      vrEnabled: isSet(object.vrEnabled) ? globalThis.Boolean(object.vrEnabled) : false,
      vrPlanImageUrl: isSet(object.vrPlanImageUrl) ? globalThis.String(object.vrPlanImageUrl) : "",
      metaTitle: isSet(object.metaTitle) ? globalThis.String(object.metaTitle) : "",
      metaDescription: isSet(object.metaDescription) ? globalThis.String(object.metaDescription) : "",
      metaKeywords: isSet(object.metaKeywords) ? globalThis.String(object.metaKeywords) : "",
      customSchema: isSet(object.customSchema) ? globalThis.String(object.customSchema) : "",
      noindex: isSet(object.noindex) ? globalThis.Boolean(object.noindex) : false,
      isFeatured: isSet(object.isFeatured) ? globalThis.Boolean(object.isFeatured) : false,
      featureSort: isSet(object.featureSort) ? globalThis.Number(object.featureSort) : 0,
      promoTitle: isSet(object.promoTitle) ? globalThis.String(object.promoTitle) : "",
      promoBadge: isSet(object.promoBadge) ? globalThis.String(object.promoBadge) : "",
      promoActive: isSet(object.promoActive) ? globalThis.Boolean(object.promoActive) : false,
      discountType: isSet(object.discountType) ? globalThis.String(object.discountType) : "",
      discountValue: isSet(object.discountValue) ? globalThis.Number(object.discountValue) : 0,
      discountActive: isSet(object.discountActive) ? globalThis.Boolean(object.discountActive) : false,
      discountStart: isSet(object.discountStart) ? globalThis.String(object.discountStart) : "",
      discountEnd: isSet(object.discountEnd) ? globalThis.String(object.discountEnd) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      complementaryIds: globalThis.Array.isArray(object?.complementaryIds)
        ? object.complementaryIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProductPatch): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.excerpt !== "") {
      obj.excerpt = message.excerpt;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.thumbnailUrl !== "") {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.model3dUrl !== "") {
      obj.model3dUrl = message.model3dUrl;
    }
    if (message.model3dFormat !== "") {
      obj.model3dFormat = message.model3dFormat;
    }
    if (message.model3dLiveView !== false) {
      obj.model3dLiveView = message.model3dLiveView;
    }
    if (message.model3dPosterUrl !== "") {
      obj.model3dPosterUrl = message.model3dPosterUrl;
    }
    if (message.vrEnabled !== false) {
      obj.vrEnabled = message.vrEnabled;
    }
    if (message.vrPlanImageUrl !== "") {
      obj.vrPlanImageUrl = message.vrPlanImageUrl;
    }
    if (message.metaTitle !== "") {
      obj.metaTitle = message.metaTitle;
    }
    if (message.metaDescription !== "") {
      obj.metaDescription = message.metaDescription;
    }
    if (message.metaKeywords !== "") {
      obj.metaKeywords = message.metaKeywords;
    }
    if (message.customSchema !== "") {
      obj.customSchema = message.customSchema;
    }
    if (message.noindex !== false) {
      obj.noindex = message.noindex;
    }
    if (message.isFeatured !== false) {
      obj.isFeatured = message.isFeatured;
    }
    if (message.featureSort !== 0) {
      obj.featureSort = Math.round(message.featureSort);
    }
    if (message.promoTitle !== "") {
      obj.promoTitle = message.promoTitle;
    }
    if (message.promoBadge !== "") {
      obj.promoBadge = message.promoBadge;
    }
    if (message.promoActive !== false) {
      obj.promoActive = message.promoActive;
    }
    if (message.discountType !== "") {
      obj.discountType = message.discountType;
    }
    if (message.discountValue !== 0) {
      obj.discountValue = message.discountValue;
    }
    if (message.discountActive !== false) {
      obj.discountActive = message.discountActive;
    }
    if (message.discountStart !== "") {
      obj.discountStart = message.discountStart;
    }
    if (message.discountEnd !== "") {
      obj.discountEnd = message.discountEnd;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.complementaryIds?.length) {
      obj.complementaryIds = message.complementaryIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductPatch>, I>>(base?: I): ProductPatch {
    return ProductPatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductPatch>, I>>(object: I): ProductPatch {
    const message = createBaseProductPatch();
    message.title = object.title ?? "";
    message.slug = object.slug ?? "";
    message.sku = object.sku ?? "";
    message.price = object.price ?? 0;
    message.categoryId = object.categoryId ?? "";
    message.description = object.description ?? "";
    message.excerpt = object.excerpt ?? "";
    message.currency = object.currency ?? "";
    message.status = object.status ?? "";
    message.thumbnailUrl = object.thumbnailUrl ?? "";
    message.model3dUrl = object.model3dUrl ?? "";
    message.model3dFormat = object.model3dFormat ?? "";
    message.model3dLiveView = object.model3dLiveView ?? false;
    message.model3dPosterUrl = object.model3dPosterUrl ?? "";
    message.vrEnabled = object.vrEnabled ?? false;
    message.vrPlanImageUrl = object.vrPlanImageUrl ?? "";
    message.metaTitle = object.metaTitle ?? "";
    message.metaDescription = object.metaDescription ?? "";
    message.metaKeywords = object.metaKeywords ?? "";
    message.customSchema = object.customSchema ?? "";
    message.noindex = object.noindex ?? false;
    message.isFeatured = object.isFeatured ?? false;
    message.featureSort = object.featureSort ?? 0;
    message.promoTitle = object.promoTitle ?? "";
    message.promoBadge = object.promoBadge ?? "";
    message.promoActive = object.promoActive ?? false;
    message.discountType = object.discountType ?? "";
    message.discountValue = object.discountValue ?? 0;
    message.discountActive = object.discountActive ?? false;
    message.discountStart = object.discountStart ?? "";
    message.discountEnd = object.discountEnd ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.complementaryIds = object.complementaryIds?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(ProductPatch.$type, ProductPatch);

function createBaseCreateProductRequest(): CreateProductRequest {
  return { $type: "product.CreateProductRequest", data: undefined };
}

export const CreateProductRequest: MessageFns<CreateProductRequest, "product.CreateProductRequest"> = {
  $type: "product.CreateProductRequest" as const,

  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      $type: CreateProductRequest.$type,
      data: isSet(object.data) ? ProductInput.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = ProductInput.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductRequest>, I>>(base?: I): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductRequest>, I>>(object: I): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductInput.fromPartial(object.data)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CreateProductRequest.$type, CreateProductRequest);

function createBaseUpdateProductRequest(): UpdateProductRequest {
  return { $type: "product.UpdateProductRequest", id: "", data: undefined };
}

export const UpdateProductRequest: MessageFns<UpdateProductRequest, "product.UpdateProductRequest"> = {
  $type: "product.UpdateProductRequest" as const,

  encode(message: UpdateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ProductPatch.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ProductPatch.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductRequest {
    return {
      $type: UpdateProductRequest.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? ProductPatch.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = ProductPatch.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(base?: I): UpdateProductRequest {
    return UpdateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(object: I): UpdateProductRequest {
    const message = createBaseUpdateProductRequest();
    message.id = object.id ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ProductPatch.fromPartial(object.data)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(UpdateProductRequest.$type, UpdateProductRequest);

function createBaseGetProductRequest(): GetProductRequest {
  return { $type: "product.GetProductRequest", id: "" };
}

export const GetProductRequest: MessageFns<GetProductRequest, "product.GetProductRequest"> = {
  $type: "product.GetProductRequest" as const,

  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return { $type: GetProductRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductRequest>, I>>(base?: I): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductRequest>, I>>(object: I): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetProductRequest.$type, GetProductRequest);

function createBaseListProductsRequest(): ListProductsRequest {
  return {
    $type: "product.ListProductsRequest",
    page: 0,
    limit: 0,
    q: "",
    categoryId: "",
    status: "",
    includeDeleted: false,
  };
}

export const ListProductsRequest: MessageFns<ListProductsRequest, "product.ListProductsRequest"> = {
  $type: "product.ListProductsRequest" as const,

  encode(message: ListProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.q !== "") {
      writer.uint32(26).string(message.q);
    }
    if (message.categoryId !== "") {
      writer.uint32(34).string(message.categoryId);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.includeDeleted !== false) {
      writer.uint32(48).bool(message.includeDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.q = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.includeDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsRequest {
    return {
      $type: ListProductsRequest.$type,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      q: isSet(object.q) ? globalThis.String(object.q) : "",
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      includeDeleted: isSet(object.includeDeleted) ? globalThis.Boolean(object.includeDeleted) : false,
    };
  },

  toJSON(message: ListProductsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.q !== "") {
      obj.q = message.q;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.includeDeleted !== false) {
      obj.includeDeleted = message.includeDeleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsRequest>, I>>(base?: I): ListProductsRequest {
    return ListProductsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsRequest>, I>>(object: I): ListProductsRequest {
    const message = createBaseListProductsRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.q = object.q ?? "";
    message.categoryId = object.categoryId ?? "";
    message.status = object.status ?? "";
    message.includeDeleted = object.includeDeleted ?? false;
    return message;
  },
};

messageTypeRegistry.set(ListProductsRequest.$type, ListProductsRequest);

function createBaseDeleteProductRequest(): DeleteProductRequest {
  return { $type: "product.DeleteProductRequest", id: "" };
}

export const DeleteProductRequest: MessageFns<DeleteProductRequest, "product.DeleteProductRequest"> = {
  $type: "product.DeleteProductRequest" as const,

  encode(message: DeleteProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductRequest {
    return { $type: DeleteProductRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProductRequest>, I>>(base?: I): DeleteProductRequest {
    return DeleteProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProductRequest>, I>>(object: I): DeleteProductRequest {
    const message = createBaseDeleteProductRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(DeleteProductRequest.$type, DeleteProductRequest);

function createBaseRestoreProductRequest(): RestoreProductRequest {
  return { $type: "product.RestoreProductRequest", id: "" };
}

export const RestoreProductRequest: MessageFns<RestoreProductRequest, "product.RestoreProductRequest"> = {
  $type: "product.RestoreProductRequest" as const,

  encode(message: RestoreProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreProductRequest {
    return { $type: RestoreProductRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RestoreProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestoreProductRequest>, I>>(base?: I): RestoreProductRequest {
    return RestoreProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestoreProductRequest>, I>>(object: I): RestoreProductRequest {
    const message = createBaseRestoreProductRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(RestoreProductRequest.$type, RestoreProductRequest);

function createBaseHardDeleteProductRequest(): HardDeleteProductRequest {
  return { $type: "product.HardDeleteProductRequest", id: "" };
}

export const HardDeleteProductRequest: MessageFns<HardDeleteProductRequest, "product.HardDeleteProductRequest"> = {
  $type: "product.HardDeleteProductRequest" as const,

  encode(message: HardDeleteProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HardDeleteProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHardDeleteProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HardDeleteProductRequest {
    return { $type: HardDeleteProductRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: HardDeleteProductRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HardDeleteProductRequest>, I>>(base?: I): HardDeleteProductRequest {
    return HardDeleteProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HardDeleteProductRequest>, I>>(object: I): HardDeleteProductRequest {
    const message = createBaseHardDeleteProductRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(HardDeleteProductRequest.$type, HardDeleteProductRequest);

function createBaseProductResponse(): ProductResponse {
  return { $type: "product.ProductResponse", data: undefined };
}

export const ProductResponse: MessageFns<ProductResponse, "product.ProductResponse"> = {
  $type: "product.ProductResponse" as const,

  encode(message: ProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Product.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductResponse {
    return { $type: ProductResponse.$type, data: isSet(object.data) ? Product.fromJSON(object.data) : undefined };
  },

  toJSON(message: ProductResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Product.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductResponse>, I>>(base?: I): ProductResponse {
    return ProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductResponse>, I>>(object: I): ProductResponse {
    const message = createBaseProductResponse();
    message.data = (object.data !== undefined && object.data !== null) ? Product.fromPartial(object.data) : undefined;
    return message;
  },
};

messageTypeRegistry.set(ProductResponse.$type, ProductResponse);

function createBaseListProductsResponse(): ListProductsResponse {
  return { $type: "product.ListProductsResponse", data: [], total: 0 };
}

export const ListProductsResponse: MessageFns<ListProductsResponse, "product.ListProductsResponse"> = {
  $type: "product.ListProductsResponse" as const,

  encode(message: ListProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(Product.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsResponse {
    return {
      $type: ListProductsResponse.$type,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Product.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: ListProductsResponse): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => Product.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsResponse>, I>>(base?: I): ListProductsResponse {
    return ListProductsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsResponse>, I>>(object: I): ListProductsResponse {
    const message = createBaseListProductsResponse();
    message.data = object.data?.map((e) => Product.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ListProductsResponse.$type, ListProductsResponse);

function createBaseApplyDiscountBulkRequest(): ApplyDiscountBulkRequest {
  return {
    $type: "product.ApplyDiscountBulkRequest",
    ids: [],
    categoryId: "",
    status: "",
    q: "",
    discountType: "",
    discountValue: 0,
    discountActive: false,
    discountStart: "",
    discountEnd: "",
  };
}

export const ApplyDiscountBulkRequest: MessageFns<ApplyDiscountBulkRequest, "product.ApplyDiscountBulkRequest"> = {
  $type: "product.ApplyDiscountBulkRequest" as const,

  encode(message: ApplyDiscountBulkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      writer.uint32(10).string(v!);
    }
    if (message.categoryId !== "") {
      writer.uint32(18).string(message.categoryId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.q !== "") {
      writer.uint32(34).string(message.q);
    }
    if (message.discountType !== "") {
      writer.uint32(82).string(message.discountType);
    }
    if (message.discountValue !== 0) {
      writer.uint32(89).double(message.discountValue);
    }
    if (message.discountActive !== false) {
      writer.uint32(96).bool(message.discountActive);
    }
    if (message.discountStart !== "") {
      writer.uint32(106).string(message.discountStart);
    }
    if (message.discountEnd !== "") {
      writer.uint32(114).string(message.discountEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyDiscountBulkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyDiscountBulkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.q = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.discountType = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.discountValue = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.discountActive = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.discountStart = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.discountEnd = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyDiscountBulkRequest {
    return {
      $type: ApplyDiscountBulkRequest.$type,
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      q: isSet(object.q) ? globalThis.String(object.q) : "",
      discountType: isSet(object.discountType) ? globalThis.String(object.discountType) : "",
      discountValue: isSet(object.discountValue) ? globalThis.Number(object.discountValue) : 0,
      discountActive: isSet(object.discountActive) ? globalThis.Boolean(object.discountActive) : false,
      discountStart: isSet(object.discountStart) ? globalThis.String(object.discountStart) : "",
      discountEnd: isSet(object.discountEnd) ? globalThis.String(object.discountEnd) : "",
    };
  },

  toJSON(message: ApplyDiscountBulkRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.q !== "") {
      obj.q = message.q;
    }
    if (message.discountType !== "") {
      obj.discountType = message.discountType;
    }
    if (message.discountValue !== 0) {
      obj.discountValue = message.discountValue;
    }
    if (message.discountActive !== false) {
      obj.discountActive = message.discountActive;
    }
    if (message.discountStart !== "") {
      obj.discountStart = message.discountStart;
    }
    if (message.discountEnd !== "") {
      obj.discountEnd = message.discountEnd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplyDiscountBulkRequest>, I>>(base?: I): ApplyDiscountBulkRequest {
    return ApplyDiscountBulkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplyDiscountBulkRequest>, I>>(object: I): ApplyDiscountBulkRequest {
    const message = createBaseApplyDiscountBulkRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.categoryId = object.categoryId ?? "";
    message.status = object.status ?? "";
    message.q = object.q ?? "";
    message.discountType = object.discountType ?? "";
    message.discountValue = object.discountValue ?? 0;
    message.discountActive = object.discountActive ?? false;
    message.discountStart = object.discountStart ?? "";
    message.discountEnd = object.discountEnd ?? "";
    return message;
  },
};

messageTypeRegistry.set(ApplyDiscountBulkRequest.$type, ApplyDiscountBulkRequest);

function createBaseBulkResult(): BulkResult {
  return { $type: "product.BulkResult", updated: 0 };
}

export const BulkResult: MessageFns<BulkResult, "product.BulkResult"> = {
  $type: "product.BulkResult" as const,

  encode(message: BulkResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updated !== 0) {
      writer.uint32(8).int32(message.updated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.updated = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkResult {
    return { $type: BulkResult.$type, updated: isSet(object.updated) ? globalThis.Number(object.updated) : 0 };
  },

  toJSON(message: BulkResult): unknown {
    const obj: any = {};
    if (message.updated !== 0) {
      obj.updated = Math.round(message.updated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulkResult>, I>>(base?: I): BulkResult {
    return BulkResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulkResult>, I>>(object: I): BulkResult {
    const message = createBaseBulkResult();
    message.updated = object.updated ?? 0;
    return message;
  },
};

messageTypeRegistry.set(BulkResult.$type, BulkResult);

function createBaseGalleryImage(): GalleryImage {
  return { $type: "product.GalleryImage", id: "", url: "", alt: "", sort: 0 };
}

export const GalleryImage: MessageFns<GalleryImage, "product.GalleryImage"> = {
  $type: "product.GalleryImage" as const,

  encode(message: GalleryImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.alt !== "") {
      writer.uint32(26).string(message.alt);
    }
    if (message.sort !== 0) {
      writer.uint32(32).int32(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GalleryImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalleryImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.alt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GalleryImage {
    return {
      $type: GalleryImage.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      alt: isSet(object.alt) ? globalThis.String(object.alt) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
    };
  },

  toJSON(message: GalleryImage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.alt !== "") {
      obj.alt = message.alt;
    }
    if (message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GalleryImage>, I>>(base?: I): GalleryImage {
    return GalleryImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GalleryImage>, I>>(object: I): GalleryImage {
    const message = createBaseGalleryImage();
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.alt = object.alt ?? "";
    message.sort = object.sort ?? 0;
    return message;
  },
};

messageTypeRegistry.set(GalleryImage.$type, GalleryImage);

function createBaseNewImage(): NewImage {
  return { $type: "product.NewImage", url: "", alt: "", sort: 0 };
}

export const NewImage: MessageFns<NewImage, "product.NewImage"> = {
  $type: "product.NewImage" as const,

  encode(message: NewImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.alt !== "") {
      writer.uint32(18).string(message.alt);
    }
    if (message.sort !== 0) {
      writer.uint32(24).int32(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.alt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewImage {
    return {
      $type: NewImage.$type,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      alt: isSet(object.alt) ? globalThis.String(object.alt) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
    };
  },

  toJSON(message: NewImage): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.alt !== "") {
      obj.alt = message.alt;
    }
    if (message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewImage>, I>>(base?: I): NewImage {
    return NewImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewImage>, I>>(object: I): NewImage {
    const message = createBaseNewImage();
    message.url = object.url ?? "";
    message.alt = object.alt ?? "";
    message.sort = object.sort ?? 0;
    return message;
  },
};

messageTypeRegistry.set(NewImage.$type, NewImage);

function createBaseAddImagesRequest(): AddImagesRequest {
  return { $type: "product.AddImagesRequest", productId: "", images: [] };
}

export const AddImagesRequest: MessageFns<AddImagesRequest, "product.AddImagesRequest"> = {
  $type: "product.AddImagesRequest" as const,

  encode(message: AddImagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    for (const v of message.images) {
      NewImage.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddImagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddImagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.images.push(NewImage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddImagesRequest {
    return {
      $type: AddImagesRequest.$type,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => NewImage.fromJSON(e)) : [],
    };
  },

  toJSON(message: AddImagesRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => NewImage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddImagesRequest>, I>>(base?: I): AddImagesRequest {
    return AddImagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddImagesRequest>, I>>(object: I): AddImagesRequest {
    const message = createBaseAddImagesRequest();
    message.productId = object.productId ?? "";
    message.images = object.images?.map((e) => NewImage.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(AddImagesRequest.$type, AddImagesRequest);

function createBaseListGalleryRequest(): ListGalleryRequest {
  return { $type: "product.ListGalleryRequest", productId: "", includeDeleted: false };
}

export const ListGalleryRequest: MessageFns<ListGalleryRequest, "product.ListGalleryRequest"> = {
  $type: "product.ListGalleryRequest" as const,

  encode(message: ListGalleryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.includeDeleted !== false) {
      writer.uint32(16).bool(message.includeDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGalleryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGalleryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.includeDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGalleryRequest {
    return {
      $type: ListGalleryRequest.$type,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      includeDeleted: isSet(object.includeDeleted) ? globalThis.Boolean(object.includeDeleted) : false,
    };
  },

  toJSON(message: ListGalleryRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.includeDeleted !== false) {
      obj.includeDeleted = message.includeDeleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGalleryRequest>, I>>(base?: I): ListGalleryRequest {
    return ListGalleryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGalleryRequest>, I>>(object: I): ListGalleryRequest {
    const message = createBaseListGalleryRequest();
    message.productId = object.productId ?? "";
    message.includeDeleted = object.includeDeleted ?? false;
    return message;
  },
};

messageTypeRegistry.set(ListGalleryRequest.$type, ListGalleryRequest);

function createBaseImageOrder(): ImageOrder {
  return { $type: "product.ImageOrder", id: "", sort: 0 };
}

export const ImageOrder: MessageFns<ImageOrder, "product.ImageOrder"> = {
  $type: "product.ImageOrder" as const,

  encode(message: ImageOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sort !== 0) {
      writer.uint32(16).int32(message.sort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sort = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageOrder {
    return {
      $type: ImageOrder.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sort: isSet(object.sort) ? globalThis.Number(object.sort) : 0,
    };
  },

  toJSON(message: ImageOrder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sort !== 0) {
      obj.sort = Math.round(message.sort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageOrder>, I>>(base?: I): ImageOrder {
    return ImageOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageOrder>, I>>(object: I): ImageOrder {
    const message = createBaseImageOrder();
    message.id = object.id ?? "";
    message.sort = object.sort ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ImageOrder.$type, ImageOrder);

function createBaseReorderImagesRequest(): ReorderImagesRequest {
  return { $type: "product.ReorderImagesRequest", productId: "", orders: [] };
}

export const ReorderImagesRequest: MessageFns<ReorderImagesRequest, "product.ReorderImagesRequest"> = {
  $type: "product.ReorderImagesRequest" as const,

  encode(message: ReorderImagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    for (const v of message.orders) {
      ImageOrder.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReorderImagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReorderImagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orders.push(ImageOrder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReorderImagesRequest {
    return {
      $type: ReorderImagesRequest.$type,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => ImageOrder.fromJSON(e)) : [],
    };
  },

  toJSON(message: ReorderImagesRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => ImageOrder.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReorderImagesRequest>, I>>(base?: I): ReorderImagesRequest {
    return ReorderImagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReorderImagesRequest>, I>>(object: I): ReorderImagesRequest {
    const message = createBaseReorderImagesRequest();
    message.productId = object.productId ?? "";
    message.orders = object.orders?.map((e) => ImageOrder.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(ReorderImagesRequest.$type, ReorderImagesRequest);

function createBaseRemoveImageRequest(): RemoveImageRequest {
  return { $type: "product.RemoveImageRequest", productId: "", imageId: "", hardDelete: false };
}

export const RemoveImageRequest: MessageFns<RemoveImageRequest, "product.RemoveImageRequest"> = {
  $type: "product.RemoveImageRequest" as const,

  encode(message: RemoveImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.imageId !== "") {
      writer.uint32(18).string(message.imageId);
    }
    if (message.hardDelete !== false) {
      writer.uint32(24).bool(message.hardDelete);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hardDelete = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveImageRequest {
    return {
      $type: RemoveImageRequest.$type,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
      hardDelete: isSet(object.hardDelete) ? globalThis.Boolean(object.hardDelete) : false,
    };
  },

  toJSON(message: RemoveImageRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    if (message.hardDelete !== false) {
      obj.hardDelete = message.hardDelete;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveImageRequest>, I>>(base?: I): RemoveImageRequest {
    return RemoveImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveImageRequest>, I>>(object: I): RemoveImageRequest {
    const message = createBaseRemoveImageRequest();
    message.productId = object.productId ?? "";
    message.imageId = object.imageId ?? "";
    message.hardDelete = object.hardDelete ?? false;
    return message;
  },
};

messageTypeRegistry.set(RemoveImageRequest.$type, RemoveImageRequest);

function createBaseGalleryResponse(): GalleryResponse {
  return { $type: "product.GalleryResponse", productId: "", images: [] };
}

export const GalleryResponse: MessageFns<GalleryResponse, "product.GalleryResponse"> = {
  $type: "product.GalleryResponse" as const,

  encode(message: GalleryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    for (const v of message.images) {
      GalleryImage.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GalleryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalleryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.images.push(GalleryImage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GalleryResponse {
    return {
      $type: GalleryResponse.$type,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => GalleryImage.fromJSON(e)) : [],
    };
  },

  toJSON(message: GalleryResponse): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => GalleryImage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GalleryResponse>, I>>(base?: I): GalleryResponse {
    return GalleryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GalleryResponse>, I>>(object: I): GalleryResponse {
    const message = createBaseGalleryResponse();
    message.productId = object.productId ?? "";
    message.images = object.images?.map((e) => GalleryImage.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(GalleryResponse.$type, GalleryResponse);

/**
 * -----------------------------------------
 * Service
 * -----------------------------------------
 */
export type ProductServiceService = typeof ProductServiceService;
export const ProductServiceService = {
  createProduct: {
    path: "/product.ProductService/CreateProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateProductRequest): Buffer => Buffer.from(CreateProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateProductRequest => CreateProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  updateProduct: {
    path: "/product.ProductService/UpdateProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProductRequest): Buffer => Buffer.from(UpdateProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateProductRequest => UpdateProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  getProduct: {
    path: "/product.ProductService/GetProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProductRequest): Buffer => Buffer.from(GetProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetProductRequest => GetProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  listProducts: {
    path: "/product.ProductService/ListProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductsRequest): Buffer => Buffer.from(ListProductsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProductsRequest => ListProductsRequest.decode(value),
    responseSerialize: (value: ListProductsResponse): Buffer =>
      Buffer.from(ListProductsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListProductsResponse => ListProductsResponse.decode(value),
  },
  /** soft */
  deleteProduct: {
    path: "/product.ProductService/DeleteProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteProductRequest): Buffer => Buffer.from(DeleteProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteProductRequest => DeleteProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  restoreProduct: {
    path: "/product.ProductService/RestoreProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RestoreProductRequest): Buffer =>
      Buffer.from(RestoreProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RestoreProductRequest => RestoreProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  hardDeleteProduct: {
    path: "/product.ProductService/HardDeleteProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HardDeleteProductRequest): Buffer =>
      Buffer.from(HardDeleteProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HardDeleteProductRequest => HardDeleteProductRequest.decode(value),
    responseSerialize: (value: ProductResponse): Buffer => Buffer.from(ProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductResponse => ProductResponse.decode(value),
  },
  applyDiscountBulk: {
    path: "/product.ProductService/ApplyDiscountBulk",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ApplyDiscountBulkRequest): Buffer =>
      Buffer.from(ApplyDiscountBulkRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ApplyDiscountBulkRequest => ApplyDiscountBulkRequest.decode(value),
    responseSerialize: (value: BulkResult): Buffer => Buffer.from(BulkResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): BulkResult => BulkResult.decode(value),
  },
  addImages: {
    path: "/product.ProductService/AddImages",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddImagesRequest): Buffer => Buffer.from(AddImagesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AddImagesRequest => AddImagesRequest.decode(value),
    responseSerialize: (value: GalleryResponse): Buffer => Buffer.from(GalleryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GalleryResponse => GalleryResponse.decode(value),
  },
  listGallery: {
    path: "/product.ProductService/ListGallery",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListGalleryRequest): Buffer => Buffer.from(ListGalleryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListGalleryRequest => ListGalleryRequest.decode(value),
    responseSerialize: (value: GalleryResponse): Buffer => Buffer.from(GalleryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GalleryResponse => GalleryResponse.decode(value),
  },
  reorderImages: {
    path: "/product.ProductService/ReorderImages",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReorderImagesRequest): Buffer => Buffer.from(ReorderImagesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ReorderImagesRequest => ReorderImagesRequest.decode(value),
    responseSerialize: (value: GalleryResponse): Buffer => Buffer.from(GalleryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GalleryResponse => GalleryResponse.decode(value),
  },
  removeImage: {
    path: "/product.ProductService/RemoveImage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveImageRequest): Buffer => Buffer.from(RemoveImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RemoveImageRequest => RemoveImageRequest.decode(value),
    responseSerialize: (value: GalleryResponse): Buffer => Buffer.from(GalleryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GalleryResponse => GalleryResponse.decode(value),
  },
} as const;

export interface ProductServiceServer extends UntypedServiceImplementation {
  createProduct: handleUnaryCall<CreateProductRequest, ProductResponse>;
  updateProduct: handleUnaryCall<UpdateProductRequest, ProductResponse>;
  getProduct: handleUnaryCall<GetProductRequest, ProductResponse>;
  listProducts: handleUnaryCall<ListProductsRequest, ListProductsResponse>;
  /** soft */
  deleteProduct: handleUnaryCall<DeleteProductRequest, ProductResponse>;
  restoreProduct: handleUnaryCall<RestoreProductRequest, ProductResponse>;
  hardDeleteProduct: handleUnaryCall<HardDeleteProductRequest, ProductResponse>;
  applyDiscountBulk: handleUnaryCall<ApplyDiscountBulkRequest, BulkResult>;
  addImages: handleUnaryCall<AddImagesRequest, GalleryResponse>;
  listGallery: handleUnaryCall<ListGalleryRequest, GalleryResponse>;
  reorderImages: handleUnaryCall<ReorderImagesRequest, GalleryResponse>;
  removeImage: handleUnaryCall<RemoveImageRequest, GalleryResponse>;
}

export interface ProductServiceClient extends Client {
  createProduct(
    request: CreateProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  updateProduct(
    request: UpdateProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  updateProduct(
    request: UpdateProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  updateProduct(
    request: UpdateProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
  /** soft */
  deleteProduct(
    request: DeleteProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  deleteProduct(
    request: DeleteProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  deleteProduct(
    request: DeleteProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  restoreProduct(
    request: RestoreProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  restoreProduct(
    request: RestoreProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  restoreProduct(
    request: RestoreProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  hardDeleteProduct(
    request: HardDeleteProductRequest,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  hardDeleteProduct(
    request: HardDeleteProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  hardDeleteProduct(
    request: HardDeleteProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResponse) => void,
  ): ClientUnaryCall;
  applyDiscountBulk(
    request: ApplyDiscountBulkRequest,
    callback: (error: ServiceError | null, response: BulkResult) => void,
  ): ClientUnaryCall;
  applyDiscountBulk(
    request: ApplyDiscountBulkRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BulkResult) => void,
  ): ClientUnaryCall;
  applyDiscountBulk(
    request: ApplyDiscountBulkRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BulkResult) => void,
  ): ClientUnaryCall;
  addImages(
    request: AddImagesRequest,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  addImages(
    request: AddImagesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  addImages(
    request: AddImagesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  listGallery(
    request: ListGalleryRequest,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  listGallery(
    request: ListGalleryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  listGallery(
    request: ListGalleryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  reorderImages(
    request: ReorderImagesRequest,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  reorderImages(
    request: ReorderImagesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  reorderImages(
    request: ReorderImagesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  removeImage(
    request: RemoveImageRequest,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  removeImage(
    request: RemoveImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
  removeImage(
    request: RemoveImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GalleryResponse) => void,
  ): ClientUnaryCall;
}

export const ProductServiceClient = makeGenericClientConstructor(
  ProductServiceService,
  "product.ProductService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProductServiceClient;
  service: typeof ProductServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
