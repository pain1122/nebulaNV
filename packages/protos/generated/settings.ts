// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "settings";

export interface GetReq {
  $type: "settings.GetReq";
  namespace: string;
  /** optional, default "default" */
  environment: string;
  key: string;
}

export interface GetStringRes {
  $type: "settings.GetStringRes";
  value: string;
  found: boolean;
}

export interface SetStringReq {
  $type: "settings.SetStringReq";
  namespace: string;
  environment: string;
  key: string;
  value: string;
}

export interface SetStringRes {
  $type: "settings.SetStringRes";
  value: string;
}

export interface DeleteReq {
  $type: "settings.DeleteReq";
  namespace: string;
  environment: string;
  key: string;
}

export interface DeleteRes {
  $type: "settings.DeleteRes";
  deleted: boolean;
}

function createBaseGetReq(): GetReq {
  return { $type: "settings.GetReq", namespace: "", environment: "", key: "" };
}

export const GetReq: MessageFns<GetReq, "settings.GetReq"> = {
  $type: "settings.GetReq" as const,

  encode(message: GetReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.environment !== "") {
      writer.uint32(18).string(message.environment);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReq {
    return {
      $type: GetReq.$type,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: GetReq): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReq>, I>>(base?: I): GetReq {
    return GetReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReq>, I>>(object: I): GetReq {
    const message = createBaseGetReq();
    message.namespace = object.namespace ?? "";
    message.environment = object.environment ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetReq.$type, GetReq);

function createBaseGetStringRes(): GetStringRes {
  return { $type: "settings.GetStringRes", value: "", found: false };
}

export const GetStringRes: MessageFns<GetStringRes, "settings.GetStringRes"> = {
  $type: "settings.GetStringRes" as const,

  encode(message: GetStringRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.found !== false) {
      writer.uint32(16).bool(message.found);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStringRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStringRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.found = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStringRes {
    return {
      $type: GetStringRes.$type,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      found: isSet(object.found) ? globalThis.Boolean(object.found) : false,
    };
  },

  toJSON(message: GetStringRes): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.found !== false) {
      obj.found = message.found;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStringRes>, I>>(base?: I): GetStringRes {
    return GetStringRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStringRes>, I>>(object: I): GetStringRes {
    const message = createBaseGetStringRes();
    message.value = object.value ?? "";
    message.found = object.found ?? false;
    return message;
  },
};

messageTypeRegistry.set(GetStringRes.$type, GetStringRes);

function createBaseSetStringReq(): SetStringReq {
  return { $type: "settings.SetStringReq", namespace: "", environment: "", key: "", value: "" };
}

export const SetStringReq: MessageFns<SetStringReq, "settings.SetStringReq"> = {
  $type: "settings.SetStringReq" as const,

  encode(message: SetStringReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.environment !== "") {
      writer.uint32(18).string(message.environment);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetStringReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStringReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetStringReq {
    return {
      $type: SetStringReq.$type,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SetStringReq): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetStringReq>, I>>(base?: I): SetStringReq {
    return SetStringReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetStringReq>, I>>(object: I): SetStringReq {
    const message = createBaseSetStringReq();
    message.namespace = object.namespace ?? "";
    message.environment = object.environment ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(SetStringReq.$type, SetStringReq);

function createBaseSetStringRes(): SetStringRes {
  return { $type: "settings.SetStringRes", value: "" };
}

export const SetStringRes: MessageFns<SetStringRes, "settings.SetStringRes"> = {
  $type: "settings.SetStringRes" as const,

  encode(message: SetStringRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetStringRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStringRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetStringRes {
    return { $type: SetStringRes.$type, value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: SetStringRes): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetStringRes>, I>>(base?: I): SetStringRes {
    return SetStringRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetStringRes>, I>>(object: I): SetStringRes {
    const message = createBaseSetStringRes();
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(SetStringRes.$type, SetStringRes);

function createBaseDeleteReq(): DeleteReq {
  return { $type: "settings.DeleteReq", namespace: "", environment: "", key: "" };
}

export const DeleteReq: MessageFns<DeleteReq, "settings.DeleteReq"> = {
  $type: "settings.DeleteReq" as const,

  encode(message: DeleteReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.environment !== "") {
      writer.uint32(18).string(message.environment);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReq {
    return {
      $type: DeleteReq.$type,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: DeleteReq): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReq>, I>>(base?: I): DeleteReq {
    return DeleteReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReq>, I>>(object: I): DeleteReq {
    const message = createBaseDeleteReq();
    message.namespace = object.namespace ?? "";
    message.environment = object.environment ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

messageTypeRegistry.set(DeleteReq.$type, DeleteReq);

function createBaseDeleteRes(): DeleteRes {
  return { $type: "settings.DeleteRes", deleted: false };
}

export const DeleteRes: MessageFns<DeleteRes, "settings.DeleteRes"> = {
  $type: "settings.DeleteRes" as const,

  encode(message: DeleteRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deleted !== false) {
      writer.uint32(8).bool(message.deleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRes {
    return { $type: DeleteRes.$type, deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false };
  },

  toJSON(message: DeleteRes): unknown {
    const obj: any = {};
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRes>, I>>(base?: I): DeleteRes {
    return DeleteRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRes>, I>>(object: I): DeleteRes {
    const message = createBaseDeleteRes();
    message.deleted = object.deleted ?? false;
    return message;
  },
};

messageTypeRegistry.set(DeleteRes.$type, DeleteRes);

export type SettingsServiceService = typeof SettingsServiceService;
export const SettingsServiceService = {
  getString: {
    path: "/settings.SettingsService/GetString",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetReq): Buffer => Buffer.from(GetReq.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetReq => GetReq.decode(value),
    responseSerialize: (value: GetStringRes): Buffer => Buffer.from(GetStringRes.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetStringRes => GetStringRes.decode(value),
  },
  setString: {
    path: "/settings.SettingsService/SetString",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetStringReq): Buffer => Buffer.from(SetStringReq.encode(value).finish()),
    requestDeserialize: (value: Buffer): SetStringReq => SetStringReq.decode(value),
    responseSerialize: (value: SetStringRes): Buffer => Buffer.from(SetStringRes.encode(value).finish()),
    responseDeserialize: (value: Buffer): SetStringRes => SetStringRes.decode(value),
  },
  deleteString: {
    path: "/settings.SettingsService/DeleteString",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteReq): Buffer => Buffer.from(DeleteReq.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteReq => DeleteReq.decode(value),
    responseSerialize: (value: DeleteRes): Buffer => Buffer.from(DeleteRes.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteRes => DeleteRes.decode(value),
  },
} as const;

export interface SettingsServiceServer extends UntypedServiceImplementation {
  getString: handleUnaryCall<GetReq, GetStringRes>;
  setString: handleUnaryCall<SetStringReq, SetStringRes>;
  deleteString: handleUnaryCall<DeleteReq, DeleteRes>;
}

export interface SettingsServiceClient extends Client {
  getString(request: GetReq, callback: (error: ServiceError | null, response: GetStringRes) => void): ClientUnaryCall;
  getString(
    request: GetReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetStringRes) => void,
  ): ClientUnaryCall;
  getString(
    request: GetReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetStringRes) => void,
  ): ClientUnaryCall;
  setString(
    request: SetStringReq,
    callback: (error: ServiceError | null, response: SetStringRes) => void,
  ): ClientUnaryCall;
  setString(
    request: SetStringReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetStringRes) => void,
  ): ClientUnaryCall;
  setString(
    request: SetStringReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetStringRes) => void,
  ): ClientUnaryCall;
  deleteString(
    request: DeleteReq,
    callback: (error: ServiceError | null, response: DeleteRes) => void,
  ): ClientUnaryCall;
  deleteString(
    request: DeleteReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteRes) => void,
  ): ClientUnaryCall;
  deleteString(
    request: DeleteReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteRes) => void,
  ): ClientUnaryCall;
}

export const SettingsServiceClient = makeGenericClientConstructor(
  SettingsServiceService,
  "settings.SettingsService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SettingsServiceClient;
  service: typeof SettingsServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
