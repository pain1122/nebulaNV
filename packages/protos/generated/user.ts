// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "user";

/** user.proto - gRPC contract for UserService */

export interface FindUserRequest {
  $type: "user.FindUserRequest";
  email?:
    | string
    | undefined;
  /** E.164 format, e.g. "+994501234567" */
  phone?: string | undefined;
}

/** Request message for fetching a user by ID */
export interface GetUserRequest {
  $type: "user.GetUserRequest";
  /** The UUID of the user to fetch */
  id: string;
}

/** Response message representing a User */
export interface UserResponse {
  $type: "user.UserResponse";
  /** Unique identifier of the user */
  id: string;
  /** Email address */
  email: string;
  /** Role (e.g., "user", "admin") */
  role: string;
}

/** Request message for updating a profile */
export interface UpdateProfileRequest {
  $type: "user.UpdateProfileRequest";
  /** The UUID of the user making the update */
  id: string;
  /** Only include fields if they should be updated */
  email: string;
  newPassword: string;
  currentPassword: string;
}

/** New messages below: */
export interface CreateUserRequest {
  $type: "user.CreateUserRequest";
  email: string;
  /** hashed */
  password: string;
  role: string;
}

export interface FindUserWithHashRequest {
  $type: "user.FindUserWithHashRequest";
  email?: string | undefined;
  phone?: string | undefined;
}

export interface FindUserWithHashResponse {
  $type: "user.FindUserWithHashResponse";
  id: string;
  email: string;
  role: string;
  passwordHash: string;
  /** the stored hash */
  refreshToken: string;
}

export interface SetRefreshTokenRequest {
  $type: "user.SetRefreshTokenRequest";
  userId: string;
  refreshToken: string;
}

export interface GetUserWithHashRequest {
  $type: "user.GetUserWithHashRequest";
  id: string;
}

export interface GetUserWithHashResponse {
  $type: "user.GetUserWithHashResponse";
  id: string;
  email: string;
  role: string;
  passwordHash: string;
  refreshToken: string;
}

function createBaseFindUserRequest(): FindUserRequest {
  return { $type: "user.FindUserRequest", email: undefined, phone: undefined };
}

export const FindUserRequest: MessageFns<FindUserRequest, "user.FindUserRequest"> = {
  $type: "user.FindUserRequest" as const,

  encode(message: FindUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== undefined) {
      writer.uint32(10).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(18).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserRequest {
    return {
      $type: FindUserRequest.$type,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
    };
  },

  toJSON(message: FindUserRequest): unknown {
    const obj: any = {};
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserRequest>, I>>(base?: I): FindUserRequest {
    return FindUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserRequest>, I>>(object: I): FindUserRequest {
    const message = createBaseFindUserRequest();
    message.email = object.email ?? undefined;
    message.phone = object.phone ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FindUserRequest.$type, FindUserRequest);

function createBaseGetUserRequest(): GetUserRequest {
  return { $type: "user.GetUserRequest", id: "" };
}

export const GetUserRequest: MessageFns<GetUserRequest, "user.GetUserRequest"> = {
  $type: "user.GetUserRequest" as const,

  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return { $type: GetUserRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRequest>, I>>(base?: I): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRequest>, I>>(object: I): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetUserRequest.$type, GetUserRequest);

function createBaseUserResponse(): UserResponse {
  return { $type: "user.UserResponse", id: "", email: "", role: "" };
}

export const UserResponse: MessageFns<UserResponse, "user.UserResponse"> = {
  $type: "user.UserResponse" as const,

  encode(message: UserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserResponse {
    return {
      $type: UserResponse.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: UserResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserResponse>, I>>(base?: I): UserResponse {
    return UserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserResponse>, I>>(object: I): UserResponse {
    const message = createBaseUserResponse();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

messageTypeRegistry.set(UserResponse.$type, UserResponse);

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { $type: "user.UpdateProfileRequest", id: "", email: "", newPassword: "", currentPassword: "" };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest, "user.UpdateProfileRequest"> = {
  $type: "user.UpdateProfileRequest" as const,

  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.newPassword !== "") {
      writer.uint32(26).string(message.newPassword);
    }
    if (message.currentPassword !== "") {
      writer.uint32(34).string(message.currentPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currentPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      $type: UpdateProfileRequest.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
      currentPassword: isSet(object.currentPassword) ? globalThis.String(object.currentPassword) : "",
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.newPassword !== "") {
      obj.newPassword = message.newPassword;
    }
    if (message.currentPassword !== "") {
      obj.currentPassword = message.currentPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.newPassword = object.newPassword ?? "";
    message.currentPassword = object.currentPassword ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateProfileRequest.$type, UpdateProfileRequest);

function createBaseCreateUserRequest(): CreateUserRequest {
  return { $type: "user.CreateUserRequest", email: "", password: "", role: "" };
}

export const CreateUserRequest: MessageFns<CreateUserRequest, "user.CreateUserRequest"> = {
  $type: "user.CreateUserRequest" as const,

  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      $type: CreateUserRequest.$type,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequest>, I>>(base?: I): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequest>, I>>(object: I): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateUserRequest.$type, CreateUserRequest);

function createBaseFindUserWithHashRequest(): FindUserWithHashRequest {
  return { $type: "user.FindUserWithHashRequest", email: undefined, phone: undefined };
}

export const FindUserWithHashRequest: MessageFns<FindUserWithHashRequest, "user.FindUserWithHashRequest"> = {
  $type: "user.FindUserWithHashRequest" as const,

  encode(message: FindUserWithHashRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== undefined) {
      writer.uint32(10).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(18).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserWithHashRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserWithHashRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserWithHashRequest {
    return {
      $type: FindUserWithHashRequest.$type,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
    };
  },

  toJSON(message: FindUserWithHashRequest): unknown {
    const obj: any = {};
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserWithHashRequest>, I>>(base?: I): FindUserWithHashRequest {
    return FindUserWithHashRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserWithHashRequest>, I>>(object: I): FindUserWithHashRequest {
    const message = createBaseFindUserWithHashRequest();
    message.email = object.email ?? undefined;
    message.phone = object.phone ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FindUserWithHashRequest.$type, FindUserWithHashRequest);

function createBaseFindUserWithHashResponse(): FindUserWithHashResponse {
  return { $type: "user.FindUserWithHashResponse", id: "", email: "", role: "", passwordHash: "", refreshToken: "" };
}

export const FindUserWithHashResponse: MessageFns<FindUserWithHashResponse, "user.FindUserWithHashResponse"> = {
  $type: "user.FindUserWithHashResponse" as const,

  encode(message: FindUserWithHashResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.passwordHash !== "") {
      writer.uint32(34).string(message.passwordHash);
    }
    if (message.refreshToken !== "") {
      writer.uint32(42).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserWithHashResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserWithHashResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserWithHashResponse {
    return {
      $type: FindUserWithHashResponse.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: FindUserWithHashResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserWithHashResponse>, I>>(base?: I): FindUserWithHashResponse {
    return FindUserWithHashResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserWithHashResponse>, I>>(object: I): FindUserWithHashResponse {
    const message = createBaseFindUserWithHashResponse();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(FindUserWithHashResponse.$type, FindUserWithHashResponse);

function createBaseSetRefreshTokenRequest(): SetRefreshTokenRequest {
  return { $type: "user.SetRefreshTokenRequest", userId: "", refreshToken: "" };
}

export const SetRefreshTokenRequest: MessageFns<SetRefreshTokenRequest, "user.SetRefreshTokenRequest"> = {
  $type: "user.SetRefreshTokenRequest" as const,

  encode(message: SetRefreshTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRefreshTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRefreshTokenRequest {
    return {
      $type: SetRefreshTokenRequest.$type,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: SetRefreshTokenRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRefreshTokenRequest>, I>>(base?: I): SetRefreshTokenRequest {
    return SetRefreshTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRefreshTokenRequest>, I>>(object: I): SetRefreshTokenRequest {
    const message = createBaseSetRefreshTokenRequest();
    message.userId = object.userId ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(SetRefreshTokenRequest.$type, SetRefreshTokenRequest);

function createBaseGetUserWithHashRequest(): GetUserWithHashRequest {
  return { $type: "user.GetUserWithHashRequest", id: "" };
}

export const GetUserWithHashRequest: MessageFns<GetUserWithHashRequest, "user.GetUserWithHashRequest"> = {
  $type: "user.GetUserWithHashRequest" as const,

  encode(message: GetUserWithHashRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserWithHashRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserWithHashRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserWithHashRequest {
    return { $type: GetUserWithHashRequest.$type, id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetUserWithHashRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserWithHashRequest>, I>>(base?: I): GetUserWithHashRequest {
    return GetUserWithHashRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserWithHashRequest>, I>>(object: I): GetUserWithHashRequest {
    const message = createBaseGetUserWithHashRequest();
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetUserWithHashRequest.$type, GetUserWithHashRequest);

function createBaseGetUserWithHashResponse(): GetUserWithHashResponse {
  return { $type: "user.GetUserWithHashResponse", id: "", email: "", role: "", passwordHash: "", refreshToken: "" };
}

export const GetUserWithHashResponse: MessageFns<GetUserWithHashResponse, "user.GetUserWithHashResponse"> = {
  $type: "user.GetUserWithHashResponse" as const,

  encode(message: GetUserWithHashResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.passwordHash !== "") {
      writer.uint32(34).string(message.passwordHash);
    }
    if (message.refreshToken !== "") {
      writer.uint32(42).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserWithHashResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserWithHashResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserWithHashResponse {
    return {
      $type: GetUserWithHashResponse.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: GetUserWithHashResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserWithHashResponse>, I>>(base?: I): GetUserWithHashResponse {
    return GetUserWithHashResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserWithHashResponse>, I>>(object: I): GetUserWithHashResponse {
    const message = createBaseGetUserWithHashResponse();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetUserWithHashResponse.$type, GetUserWithHashResponse);

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  findUser: {
    path: "/user.UserService/FindUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserRequest): Buffer => Buffer.from(FindUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FindUserRequest => FindUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  getUser: {
    path: "/user.UserService/GetUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserRequest): Buffer => Buffer.from(GetUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserRequest => GetUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  updateProfile: {
    path: "/user.UserService/UpdateProfile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProfileRequest): Buffer => Buffer.from(UpdateProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateProfileRequest => UpdateProfileRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  createUser: {
    path: "/user.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest): Buffer => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  findUserWithHash: {
    path: "/user.UserService/FindUserWithHash",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserWithHashRequest): Buffer =>
      Buffer.from(FindUserWithHashRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FindUserWithHashRequest => FindUserWithHashRequest.decode(value),
    responseSerialize: (value: FindUserWithHashResponse): Buffer =>
      Buffer.from(FindUserWithHashResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): FindUserWithHashResponse => FindUserWithHashResponse.decode(value),
  },
  setRefreshToken: {
    path: "/user.UserService/SetRefreshToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetRefreshTokenRequest): Buffer =>
      Buffer.from(SetRefreshTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SetRefreshTokenRequest => SetRefreshTokenRequest.decode(value),
    responseSerialize: (value: UserResponse): Buffer => Buffer.from(UserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserResponse => UserResponse.decode(value),
  },
  getUserWithHash: {
    path: "/user.UserService/GetUserWithHash",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserWithHashRequest): Buffer =>
      Buffer.from(GetUserWithHashRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserWithHashRequest => GetUserWithHashRequest.decode(value),
    responseSerialize: (value: GetUserWithHashResponse): Buffer =>
      Buffer.from(GetUserWithHashResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserWithHashResponse => GetUserWithHashResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  findUser: handleUnaryCall<FindUserRequest, UserResponse>;
  getUser: handleUnaryCall<GetUserRequest, UserResponse>;
  updateProfile: handleUnaryCall<UpdateProfileRequest, UserResponse>;
  createUser: handleUnaryCall<CreateUserRequest, UserResponse>;
  findUserWithHash: handleUnaryCall<FindUserWithHashRequest, FindUserWithHashResponse>;
  setRefreshToken: handleUnaryCall<SetRefreshTokenRequest, UserResponse>;
  getUserWithHash: handleUnaryCall<GetUserWithHashRequest, GetUserWithHashResponse>;
}

export interface UserServiceClient extends Client {
  findUser(
    request: FindUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  findUser(
    request: FindUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  findUser(
    request: FindUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  updateProfile(
    request: UpdateProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  findUserWithHash(
    request: FindUserWithHashRequest,
    callback: (error: ServiceError | null, response: FindUserWithHashResponse) => void,
  ): ClientUnaryCall;
  findUserWithHash(
    request: FindUserWithHashRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FindUserWithHashResponse) => void,
  ): ClientUnaryCall;
  findUserWithHash(
    request: FindUserWithHashRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FindUserWithHashResponse) => void,
  ): ClientUnaryCall;
  setRefreshToken(
    request: SetRefreshTokenRequest,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  setRefreshToken(
    request: SetRefreshTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  setRefreshToken(
    request: SetRefreshTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserResponse) => void,
  ): ClientUnaryCall;
  getUserWithHash(
    request: GetUserWithHashRequest,
    callback: (error: ServiceError | null, response: GetUserWithHashResponse) => void,
  ): ClientUnaryCall;
  getUserWithHash(
    request: GetUserWithHashRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserWithHashResponse) => void,
  ): ClientUnaryCall;
  getUserWithHash(
    request: GetUserWithHashRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserWithHashResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
